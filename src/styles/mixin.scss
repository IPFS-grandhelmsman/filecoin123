$prefix-for-webkit: true !default;
$prefix-for-mozilla: true !default;
$prefix-for-microsoft: true !default;
$prefix-for-opera: true !default;
$prefix-for-spec: true !default;

@mixin prefixer($property, $value, $prefixes) {
  @each $prefix in $prefixes {

    @if $prefix == webkit and $prefix-for-webkit == true {
      -webkit-#{$property}: $value;
    }

    @else if $prefix == moz and $prefix-for-mozilla == true {
      -moz-#{$property}: $value;
    }

    @else if $prefix == ms and $prefix-for-microsoft == true {
      -ms-#{$property}: $value;
    }

    @else if $prefix == o and $prefix-for-opera == true {
      -o-#{$property}: $value;
    }

    @else if $prefix == spec and $prefix-for-spec == true {
      #{$property}: $value;
    }

    @else {
      @warn "unrecognized prefix: #{$prefix}";
    }
  }
}

@mixin screen($res-min, $res-max) {
  @media screen and ( min-width: $res-min ) and ( max-width: $res-max ){
    @content;
  }
}

@mixin keyframes($name) {
  @keyframes #{$name} {
    @content;
  }

  @-moz-keyframes #{$name}{
    @content;
  }

  @-webkit-keyframes #{$name}{
    @content;
  }

  @-o-keyframes #{$name}{
    @content;
  }
}

@mixin display-flex {
  display: -webkit-flex; 
  display: -ms-flexbox; 
  display: flex;
}

@mixin box-shadow($shadow...) {
  @include prefixer(box-shadow, $shadow, webkit spec);
}

@mixin box-sizing($type:border-box) {
  @include prefixer(box-sizing, $type, webkit moz spec);
}

@mixin transition($property...){
  @include prefixer(transition, $property, webkit moz o spec);
}

@mixin transition-property ($property){
  @include prefixer(transition-property, $property, webkit moz o spec);
}

@mixin transition-duration ($property){
  @include prefixer(transition-duration, $property, webkit moz o spec);
}

@mixin transition-timing-function ($property){
  @include prefixer(transition-timing-function, $property, webkit moz o spec);
}

@mixin transition-delay ($property){
  @include prefixer(transition-delay, $property, webkit moz o spec);
}

@mixin transform($property...) {
  @include prefixer(transform, $property, webkit moz o spec);
}

@mixin animation($property...) {
  @include prefixer(animation, $property, webkit moz o spec);
}

@mixin animation-name($property) {
  @include prefixer(animation-name, $property, webkit moz o spec);
}

@mixin animation-duration($property) {
  @include prefixer(animation-duration, $property, webkit moz o spec);
}

@mixin animation-timing-function($property) {
  @include prefixer(animation-timing-function, $property, webkit moz o spec);
}

@mixin animation-delay($property) {
  @include prefixer(animation-delay, $property, webkit moz o spec);
}

@mixin animation-iteration-count($property) {
  @include prefixer(animation-iteration-count, $property, webkit moz o spec);
}

@mixin animation-direction ($property){
  @include prefixer(animation-direction, $property, webkit moz o spec);
}

@mixin animation-play-state ($property){
  @include prefixer(animation-play-state, $property, webkit moz o spec);
}

@mixin border-radius ($property){
  @include prefixer(border-radius, $property, webkit moz o ms spec);
}

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

@mixin relative {
  position: relative;
  width: 100%;
  height: 100%;
}

@mixin getBorder($direction:bottom, $lineSize:$mainLineSize, $lineColor:$mainLineColor) {
  @if $direction == left {
    border-left:#{$lineSize} solid #{$lineColor}
  }
  @else if $direction == right {
    border-right:#{$lineSize} solid #{$lineColor}
  }
  @else if $direction == top {
    border-top:#{$lineSize} solid #{$lineColor}
  }
  @else if $direction == bottom {
    border-bottom:#{$lineSize} solid #{$lineColor}
  }
  @else if $direction == all {
    border:#{$lineSize} solid #{$lineColor}
  }
}

@mixin scrollBar {
  &::-webkit-scrollbar-track-piece {
    background: #D3DCE6;
  }

  &::-webkit-scrollbar {
    width: 6px;
  }

  &::-webkit-scrollbar-thumb {
    background: #99A9BF;
    border-radius: 20px;
  }
}

@mixin verticalCenterLayout($layoutHeight) {
  position: absolute;
  top: 50%;
  margin-top: -#{$layoutHeight/2};
}

@mixin horizontalCenterLayout($layoutWidth) {
  position: absolute;
  left: 50%;
  margin-left: -#{$layoutWidth/2};
}

@mixin centerLayout($layoutWidth, $layoutHeight) {
  position: absolute;
  left: 50%;
  top: 50%;
  margin: -#{$layoutHeight/2} 0px 0px -#{$layoutWidth/2};
}
